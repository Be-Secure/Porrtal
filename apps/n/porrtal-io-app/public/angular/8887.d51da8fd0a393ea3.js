"use strict";(self.webpackChunka_porrtal_io_app=self.webpackChunka_porrtal_io_app||[]).push([[8887],{48887:(k,v,r)=>{r.r(v),r.d(v,{default:()=>w});var u=r(15861),a=r(17626),P=r(84792),C=r(97478),h=r(26584),I=r(80542),L=r(47877),T=r(62208),R=r(99959),D=r(10699),n=r(77712),U=(r(85931),r(8314),r(90912)),A=r(68653),j=r(76898),f=r(99433),O=r(31283),x=r(2004),S=r(83137),K=r(44917),B=r(50085),W=r(19027),b=r(65088),N=r(552),J=r(50107),F=r(49286),Z=r(6647),V=r(30346),G=r(99555),z=r(66120),H=r(97941),Q=r(13812),$=r(14772),Y=r(39058),g=r(13410),X=r(5676);let s=class extends((0,N.h)((0,H.n)((0,G.M)((0,z.x)((0,W.O)((0,b.Y)((0,F.q)((0,Z.I)((0,R.R)((0,V.Q)((0,B.V)((0,J.N)((0,I.p)(K.Z)))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=(0,T.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(D.r9).then(()=>this._fetchService(t))),Promise.resolve(this)}readImageFormat(e,t){const E=t.supportedImageFormatTypes;return E&&E.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,E,o){if(!this.loaded||!e)return;const i=e.slice().reverse().flatten(({sublayers:_})=>_&&_.toArray().reverse()).toArray();let l=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const _=(0,O.M9)(o.origin);if(_===O.s3.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;l=(0,g.QV)(i,m,O.s3.SERVICE)}else if(_>O.s3.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");l=(0,g.QV)(i,m.sublayers,(0,O.M9)(m.origin))}}const p=[],y={writeSublayerStructure:l,...o};let d=l;i.forEach(_=>{const m=_.write({},y);p.push(m),d=d||"user"===_.originOf("visible")}),p.some(_=>Object.keys(_).length>1)&&(t.layers=p),d&&(t.visibleLayers=i.filter(_=>_.visible).map(_=>_.id))}createExportImageParameters(e,t,E,o){const i=o&&o.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new $.R({layer:this,floors:o?.floors,scale:(0,S.yZ)({extent:e,width:t})*i}),p=l.toJSON();l.destroy();const y=!o||!o.rotation||this.version<10.3?{}:{rotation:-o.rotation},d=e&&e.spatialReference,_=d.wkid||JSON.stringify(d.toJSON());p.dpi*=i;const m={};if(o?.timeExtent){const{start:c,end:M}=o.timeExtent.toJSON();m.time=c&&M&&c===M?""+c:`${c??"null"},${M??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(m.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:_,imageSR:_,size:t+","+E,...p,...y,...m}}fetchImage(e,t,E,o){var i=this;return(0,u.Z)(function*(){const l={responseType:"image",signal:o?.signal??null,query:{...i.parsedUrl.query,...i.createExportImageParameters(e,t,E,o),f:"image",...i.refreshParameters,...i.customParameters,token:i.apiKey}},p=i.parsedUrl.path+"/export";if(null!=l.query.dynamicLayers&&!i.capabilities.exportMap.supportsDynamicLayers)throw new h.Z("mapimagelayer:dynamiclayer-not-supported",`service ${i.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});return(0,P.default)(p,l).then(y=>y.data).catch(y=>{throw(0,D.D_)(y)?y:new h.Z("mapimagelayer:image-fetch-error",`Unable to load image: ${p}`,{error:y})})})()}fetchRecomputedExtents(e={}){var t=this;return(0,u.Z)(function*(){const E={...e,query:{returnUpdates:!0,f:"json",...t.customParameters,token:t.apiKey}},{data:o}=yield(0,P.default)(t.url,E),{extent:i,fullExtent:l,timeExtent:p}=o,y=i||l;return{fullExtent:y&&x.Z.fromJSON(y),timeExtent:p&&C.Z.fromJSON({start:p[0],end:p[1]})}})()}loadAll(){return(0,L.G)(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return(0,X.D)(this,e)}_fetchService(e){var t=this;return(0,u.Z)(function*(){if(t.sourceJSON)return void t.read(t.sourceJSON,{origin:"service",url:t.parsedUrl});const{data:E,ssl:o}=yield(0,P.default)(t.parsedUrl.path,{query:{f:"json",...t.parsedUrl.query,...t.customParameters,token:t.apiKey},signal:e});o&&(t.url=t.url.replace(/^http:/i,"https:")),t.sourceJSON=E,t.read(E,{origin:"service",url:t.parsedUrl})})()}};(0,a._)([(0,n.Cb)({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),(0,a._)([(0,n.Cb)()],s.prototype,"dpi",void 0),(0,a._)([(0,n.Cb)()],s.prototype,"gdbVersion",void 0),(0,a._)([(0,n.Cb)()],s.prototype,"imageFormat",void 0),(0,a._)([(0,A.r)("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),(0,a._)([(0,n.Cb)({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),(0,a._)([(0,n.Cb)({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),(0,a._)([(0,n.Cb)()],s.prototype,"imageTransparency",void 0),(0,a._)([(0,n.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),(0,a._)([(0,n.Cb)({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),(0,a._)([(0,n.Cb)({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),(0,a._)([(0,n.Cb)({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),(0,a._)([(0,n.Cb)()],s.prototype,"sourceJSON",void 0),(0,a._)([(0,n.Cb)({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),(0,a._)([(0,f.c)("sublayers",{layers:{type:[Y.Z]},visibleLayers:{type:[U.z8]}})],s.prototype,"writeSublayers",null),(0,a._)([(0,n.Cb)({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),(0,a._)([(0,n.Cb)({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),(0,a._)([(0,n.Cb)(Q.HQ)],s.prototype,"url",void 0),s=(0,a._)([(0,j.j)("esri.layers.MapImageLayer")],s);const w=s}}]);